@page "/login"

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>User Code:</label>
        <InputText @bind-Value="loginModel.UserCode" />
    </div>

    <div>
        <label>Verification URI:</label>
        <InputText @bind-Value="loginModel.VerificationUri" />
    </div>

    <button type="submit">Authenticate</button>
</EditForm>

@if (!string.IsNullOrEmpty(AccessToken))
{
    <p>Access Token: @AccessToken</p>
}

@code {
    private LoginModel loginModel = new();
    private string? AccessToken;

    private async Task HandleLogin()
    {
        // Example: store token in local storage
        AccessToken = $"fake-token-for-{loginModel.UserCode}";
        await localStorage.SetItemAsync("access_token", AccessToken);
    }

    [Inject] private Blazored.LocalStorage.ILocalStorageService localStorage { get; set; } = default!;

    public class LoginModel
    {
        public string UserCode { get; set; } = string.Empty;
        public string VerificationUri { get; set; } = string.Empty;
    }
}
